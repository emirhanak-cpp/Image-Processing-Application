# -*- coding: utf-8 -*-
"""
Created on Tue Jun  4 02:07:09 2024

@author: Emirhan Ak
"""

# Form implementation generated from reading ui file 'deneme2.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from ActionImageProcessing import ImageProcessingTabs


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1144, 508)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.sourceGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.sourceGroupBox.setObjectName("sourceGroupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.sourceGroupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.sourceOpenButton = QtWidgets.QPushButton(self.sourceGroupBox)
        self.sourceOpenButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../images/open_file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sourceOpenButton.setIcon(icon)
        self.sourceOpenButton.setIconSize(QtCore.QSize(16, 16))
        self.sourceOpenButton.setObjectName("sourceOpenButton")
        self.verticalLayout.addWidget(self.sourceOpenButton)
        self.sourceExportButton = QtWidgets.QPushButton(self.sourceGroupBox)
        self.sourceExportButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../images/export.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sourceExportButton.setIcon(icon1)
        self.sourceExportButton.setObjectName("sourceExportButton")
        self.verticalLayout.addWidget(self.sourceExportButton)
        self.sourceClearButton = QtWidgets.QPushButton(self.sourceGroupBox)
        self.sourceClearButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../images/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sourceClearButton.setIcon(icon2)
        self.sourceClearButton.setObjectName("sourceClearButton")
        self.verticalLayout.addWidget(self.sourceClearButton)
        self.verticalLayout_7.addWidget(self.sourceGroupBox)
        self.outputGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.outputGroupBox.setObjectName("outputGroupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.outputGroupBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.outputSaveButton = QtWidgets.QPushButton(self.outputGroupBox)
        self.outputSaveButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../images/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.outputSaveButton.setIcon(icon3)
        self.outputSaveButton.setObjectName("outputSaveButton")
        self.verticalLayout_2.addWidget(self.outputSaveButton)
        self.outputSaveAsButton = QtWidgets.QPushButton(self.outputGroupBox)
        self.outputSaveAsButton.setText("")
        self.outputSaveAsButton.setIcon(icon3)
        self.outputSaveAsButton.setObjectName("outputSaveAsButton")
        self.verticalLayout_2.addWidget(self.outputSaveAsButton)
        self.outputExportButton = QtWidgets.QPushButton(self.outputGroupBox)
        self.outputExportButton.setText("")
        self.outputExportButton.setIcon(icon1)
        self.outputExportButton.setObjectName("outputExportButton")
        self.verticalLayout_2.addWidget(self.outputExportButton)
        self.outputClearButton = QtWidgets.QPushButton(self.outputGroupBox)
        self.outputClearButton.setText("")
        self.outputClearButton.setIcon(icon2)
        self.outputClearButton.setObjectName("outputClearButton")
        self.verticalLayout_2.addWidget(self.outputClearButton)
        self.outputUndoButton = QtWidgets.QPushButton(self.outputGroupBox)
        self.outputUndoButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../images/undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.outputUndoButton.setIcon(icon4)
        self.outputUndoButton.setObjectName("outputUndoButton")
        self.verticalLayout_2.addWidget(self.outputUndoButton)
        self.outputRedoButton = QtWidgets.QPushButton(self.outputGroupBox)
        self.outputRedoButton.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../images/redo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.outputRedoButton.setIcon(icon5)
        self.outputRedoButton.setObjectName("outputRedoButton")
        self.verticalLayout_2.addWidget(self.outputRedoButton)
        self.verticalLayout_7.addWidget(self.outputGroupBox)
        self.horizontalLayout_2.addLayout(self.verticalLayout_7)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.sourceGraphicsGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.sourceGraphicsGroupBox.setObjectName("sourceGraphicsGroupBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.sourceGraphicsGroupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.sourceGraphicsView = QtWidgets.QGraphicsView(self.sourceGraphicsGroupBox)
        self.sourceGraphicsView.setObjectName("sourceGraphicsView")
        self.gridLayout_2.addWidget(self.sourceGraphicsView, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.sourceGraphicsGroupBox)
        self.outputGraphicsGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.outputGraphicsGroupBox.setObjectName("outputGraphicsGroupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.outputGraphicsGroupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.outputGraphicsView = QtWidgets.QGraphicsView(self.outputGraphicsGroupBox)
        self.outputGraphicsView.setObjectName("outputGraphicsView")
        self.gridLayout.addWidget(self.outputGraphicsView, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.outputGraphicsGroupBox)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.conversionGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.conversionGroupBox.setObjectName("conversionGroupBox")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.conversionGroupBox)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.rgbToGrayscaleButton = QtWidgets.QPushButton(self.conversionGroupBox)
        self.rgbToGrayscaleButton.setObjectName("rgbToGrayscaleButton")
        self.verticalLayout_5.addWidget(self.rgbToGrayscaleButton)
        self.rgbToHsvButton = QtWidgets.QPushButton(self.conversionGroupBox)
        self.rgbToHsvButton.setObjectName("rgbToHsvButton")
        self.verticalLayout_5.addWidget(self.rgbToHsvButton)
        self.verticalLayout_6.addWidget(self.conversionGroupBox)
        self.segmentationGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.segmentationGroupBox.setObjectName("segmentationGroupBox")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.segmentationGroupBox)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.multiOtsuThresholdingButton = QtWidgets.QPushButton(self.segmentationGroupBox)
        self.multiOtsuThresholdingButton.setObjectName("multiOtsuThresholdingButton")
        self.verticalLayout_4.addWidget(self.multiOtsuThresholdingButton)
        self.chanVeseSegmentationButton = QtWidgets.QPushButton(self.segmentationGroupBox)
        self.chanVeseSegmentationButton.setObjectName("chanVeseSegmentationButton")
        self.verticalLayout_4.addWidget(self.chanVeseSegmentationButton)
        self.morphologicalSnakesButton = QtWidgets.QPushButton(self.segmentationGroupBox)
        self.morphologicalSnakesButton.setObjectName("morphologicalSnakesButton")
        self.verticalLayout_4.addWidget(self.morphologicalSnakesButton)
        self.verticalLayout_6.addWidget(self.segmentationGroupBox)
        self.edgeDetectionGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.edgeDetectionGroupBox.setObjectName("edgeDetectionGroupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.edgeDetectionGroupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.robertsButton = QtWidgets.QPushButton(self.edgeDetectionGroupBox)
        self.robertsButton.setObjectName("robertsButton")
        self.verticalLayout_3.addWidget(self.robertsButton)
        self.sobelButton = QtWidgets.QPushButton(self.edgeDetectionGroupBox)
        self.sobelButton.setObjectName("sobelButton")
        self.verticalLayout_3.addWidget(self.sobelButton)
        self.scharrButton = QtWidgets.QPushButton(self.edgeDetectionGroupBox)
        self.scharrButton.setObjectName("scharrButton")
        self.verticalLayout_3.addWidget(self.scharrButton)
        self.prewittButton = QtWidgets.QPushButton(self.edgeDetectionGroupBox)
        self.prewittButton.setObjectName("prewittButton")
        self.verticalLayout_3.addWidget(self.prewittButton)
        self.verticalLayout_6.addWidget(self.edgeDetectionGroupBox)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        self.gridLayout_3.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1144, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuExport_As = QtWidgets.QMenu(self.menuFile)
        self.menuExport_As.setIcon(icon1)
        self.menuExport_As.setObjectName("menuExport_As")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuClear = QtWidgets.QMenu(self.menuEdit)
        self.menuClear.setIcon(icon2)
        self.menuClear.setObjectName("menuClear")
        self.menuConversio = QtWidgets.QMenu(self.menubar)
        self.menuConversio.setObjectName("menuConversio")
        self.menuSegmentation = QtWidgets.QMenu(self.menubar)
        self.menuSegmentation.setObjectName("menuSegmentation")
        self.menuEdge_Detection = QtWidgets.QMenu(self.menubar)
        self.menuEdge_Detection.setObjectName("menuEdge_Detection")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_Source = QtWidgets.QAction(MainWindow)
        self.actionOpen_Source.setIcon(icon)
        self.actionOpen_Source.setObjectName("actionOpen_Source")
        self.actionSave_Output = QtWidgets.QAction(MainWindow)
        self.actionSave_Output.setIcon(icon3)
        self.actionSave_Output.setObjectName("actionSave_Output")
        self.actionSave_As_Output = QtWidgets.QAction(MainWindow)
        self.actionSave_As_Output.setIcon(icon3)
        self.actionSave_As_Output.setObjectName("actionSave_As_Output")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionExportSource = QtWidgets.QAction(MainWindow)
        self.actionExportSource.setObjectName("actionExportSource")
        self.actionExportOutput = QtWidgets.QAction(MainWindow)
        self.actionExportOutput.setObjectName("actionExportOutput")
        self.actionUndo_Output = QtWidgets.QAction(MainWindow)
        self.actionUndo_Output.setIcon(icon4)
        self.actionUndo_Output.setObjectName("actionUndo_Output")
        self.actionRedo_Output = QtWidgets.QAction(MainWindow)
        self.actionRedo_Output.setIcon(icon5)
        self.actionRedo_Output.setObjectName("actionRedo_Output")
        self.actionClearSource = QtWidgets.QAction(MainWindow)
        self.actionClearSource.setObjectName("actionClearSource")
        self.actionClearOutput = QtWidgets.QAction(MainWindow)
        self.actionClearOutput.setObjectName("actionClearOutput")
        self.actionRGB_to_Grayscale = QtWidgets.QAction(MainWindow)
        self.actionRGB_to_Grayscale.setObjectName("actionRGB_to_Grayscale")
        self.actionRGB_to_HSV = QtWidgets.QAction(MainWindow)
        self.actionRGB_to_HSV.setObjectName("actionRGB_to_HSV")
        self.actionMulti_Otsu_Thresholding = QtWidgets.QAction(MainWindow)
        self.actionMulti_Otsu_Thresholding.setObjectName("actionMulti_Otsu_Thresholding")
        self.actionChan_Vese_Segmentation = QtWidgets.QAction(MainWindow)
        self.actionChan_Vese_Segmentation.setObjectName("actionChan_Vese_Segmentation")
        self.actionMorphologcial_Snakes = QtWidgets.QAction(MainWindow)
        self.actionMorphologcial_Snakes.setObjectName("actionMorphologcial_Snakes")
        self.actionRoberts = QtWidgets.QAction(MainWindow)
        self.actionRoberts.setObjectName("actionRoberts")
        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setObjectName("actionSobel")
        self.actionScharr = QtWidgets.QAction(MainWindow)
        self.actionScharr.setObjectName("actionScharr")
        self.actionPrewitt = QtWidgets.QAction(MainWindow)
        self.actionPrewitt.setObjectName("actionPrewitt")
        self.menuExport_As.addAction(self.actionExportSource)
        self.menuExport_As.addAction(self.actionExportOutput)
        self.menuFile.addAction(self.actionOpen_Source)
        self.menuFile.addAction(self.actionSave_Output)
        self.menuFile.addAction(self.actionSave_As_Output)
        self.menuFile.addAction(self.menuExport_As.menuAction())
        self.menuFile.addAction(self.actionExit)
        self.menuClear.addAction(self.actionClearSource)
        self.menuClear.addAction(self.actionClearOutput)
        self.menuEdit.addAction(self.menuClear.menuAction())
        self.menuEdit.addAction(self.actionUndo_Output)
        self.menuEdit.addAction(self.actionRedo_Output)
        self.menuConversio.addAction(self.actionRGB_to_Grayscale)
        self.menuConversio.addAction(self.actionRGB_to_HSV)
        self.menuSegmentation.addAction(self.actionMulti_Otsu_Thresholding)
        self.menuSegmentation.addAction(self.actionChan_Vese_Segmentation)
        self.menuSegmentation.addAction(self.actionMorphologcial_Snakes)
        self.menuEdge_Detection.addAction(self.actionRoberts)
        self.menuEdge_Detection.addAction(self.actionSobel)
        self.menuEdge_Detection.addAction(self.actionScharr)
        self.menuEdge_Detection.addAction(self.actionPrewitt)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuConversio.menuAction())
        self.menubar.addAction(self.menuSegmentation.menuAction())
        self.menubar.addAction(self.menuEdge_Detection.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "OOP2 Lab Final Assignment"))
        self.sourceGroupBox.setTitle(_translate("MainWindow", "Source"))
        self.sourceOpenButton.setToolTip(_translate("MainWindow", "Open"))
        self.sourceExportButton.setToolTip(_translate("MainWindow", "Export"))
        self.sourceClearButton.setToolTip(_translate("MainWindow", "Clear"))
        self.outputGroupBox.setTitle(_translate("MainWindow", "Output"))
        self.outputSaveButton.setToolTip(_translate("MainWindow", "Save"))
        self.outputSaveAsButton.setToolTip(_translate("MainWindow", "Save As"))
        self.outputExportButton.setToolTip(_translate("MainWindow", "Export"))
        self.outputClearButton.setToolTip(_translate("MainWindow", "Clear"))
        self.outputUndoButton.setToolTip(_translate("MainWindow", "Undo"))
        self.outputRedoButton.setToolTip(_translate("MainWindow", "Redo"))
        self.sourceGraphicsGroupBox.setTitle(_translate("MainWindow", "Source"))
        self.outputGraphicsGroupBox.setTitle(_translate("MainWindow", "Output"))
        self.conversionGroupBox.setTitle(_translate("MainWindow", "Conversion"))
        self.rgbToGrayscaleButton.setText(_translate("MainWindow", "RGB to Grayscale"))
        self.rgbToHsvButton.setText(_translate("MainWindow", "RGB to HSV"))
        self.segmentationGroupBox.setTitle(_translate("MainWindow", "Segmentation"))
        self.multiOtsuThresholdingButton.setText(_translate("MainWindow", "Multi-Otsu Thresholding"))
        self.chanVeseSegmentationButton.setText(_translate("MainWindow", "Chan-Vese Segmentation"))
        self.morphologicalSnakesButton.setText(_translate("MainWindow", "Morphological Snakes"))
        self.edgeDetectionGroupBox.setTitle(_translate("MainWindow", "Edge Detection"))
        self.robertsButton.setText(_translate("MainWindow", "Roberts"))
        self.sobelButton.setText(_translate("MainWindow", "Sobel"))
        self.scharrButton.setText(_translate("MainWindow", "Scharr"))
        self.prewittButton.setText(_translate("MainWindow", "Prewitt"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuExport_As.setTitle(_translate("MainWindow", "Export As"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuClear.setTitle(_translate("MainWindow", "Clear"))
        self.menuConversio.setTitle(_translate("MainWindow", "Conversion"))
        self.menuSegmentation.setTitle(_translate("MainWindow", "Segmentation"))
        self.menuEdge_Detection.setTitle(_translate("MainWindow", "Edge Detection"))
        self.actionOpen_Source.setText(_translate("MainWindow", "Open Source"))
        self.actionOpen_Source.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave_Output.setText(_translate("MainWindow", "Save Output"))
        self.actionSave_As_Output.setText(_translate("MainWindow", "Save As Output"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Shift+F4"))
        self.actionExportSource.setText(_translate("MainWindow", "Source"))
        self.actionExportOutput.setText(_translate("MainWindow", "Output"))
        self.actionUndo_Output.setText(_translate("MainWindow", "Undo Output"))
        self.actionUndo_Output.setShortcut(_translate("MainWindow", "Ctrl+Shift+Z"))
        self.actionRedo_Output.setText(_translate("MainWindow", "Redo Output"))
        self.actionRedo_Output.setShortcut(_translate("MainWindow", "Ctrl+Y"))
        self.actionClearSource.setText(_translate("MainWindow", "Source"))
        self.actionClearSource.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionClearOutput.setText(_translate("MainWindow", "Output"))
        self.actionClearOutput.setShortcut(_translate("MainWindow", "Ctrl+Shift+L"))
        self.actionRGB_to_Grayscale.setText(_translate("MainWindow", "RGB to Grayscale"))
        self.actionRGB_to_HSV.setText(_translate("MainWindow", "RGB to HSV"))
        self.actionMulti_Otsu_Thresholding.setText(_translate("MainWindow", "Multi-Otsu Thresholding"))
        self.actionChan_Vese_Segmentation.setText(_translate("MainWindow", "Chan-Vese Segmentation"))
        self.actionMorphologcial_Snakes.setText(_translate("MainWindow", "Morphologcial Snakes"))
        self.actionRoberts.setText(_translate("MainWindow", "Roberts"))
        self.actionSobel.setText(_translate("MainWindow", "Sobel"))
        self.actionScharr.setText(_translate("MainWindow", "Scharr"))
        self.actionPrewitt.setText(_translate("MainWindow", "Prewitt"))
        
        #Initialization of ImageProcessingTabs type object to implement functionaly of buttons and action bar.
        self.imageProcessing = ImageProcessingTabs(self.sourceGraphicsView, self.outputGraphicsView)
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Open Source Functionality = = = = = = = = = =
        self.actionOpen_Source.triggered.connect(lambda : self.imageProcessing.openFile())
        self.sourceOpenButton.clicked.connect(lambda : self.imageProcessing.openFile())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Export Source Functionality = = = = = = = = = =
        self.actionExportSource.triggered.connect(lambda : self.imageProcessing.sourceExport())
        self.sourceExportButton.clicked.connect(lambda : self.imageProcessing.sourceExport())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Save Output Functionality = = = = = = = = = =
        self.actionSave_Output.triggered.connect(lambda : self.imageProcessing.outputSave(self.imageProcessing.getOutputImage()))
        self.outputSaveButton.clicked.connect(lambda : self.imageProcessing.outputSave(self.imageProcessing.getOutputImage()))
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Save As Output Functionality = = = = = = = = = =
        self.actionSave_As_Output.triggered.connect(lambda : self.imageProcessing.outputSaveAs(self.imageProcessing.getOutputImage()))
        self.outputSaveAsButton.clicked.connect(lambda : self.imageProcessing.outputSaveAs(self.imageProcessing.getOutputImage()))
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Export Output Functionality = = = = = = = = = =
        self.actionExportOutput.triggered.connect(lambda : self.imageProcessing.outputExport(self.imageProcessing.getOutputImage()))
        self.outputExportButton.clicked.connect(lambda : self.imageProcessing.outputExport(self.imageProcessing.getOutputImage()))
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Clear Source Functionality = = = = = = = = = =
        self.actionClearSource.triggered.connect(lambda : self.imageProcessing.clearSourceGraphicsView())
        self.sourceClearButton.clicked.connect(lambda : self.imageProcessing.clearSourceGraphicsView())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Clear Output Functionality = = = = = = = = = =
        self.actionClearOutput.triggered.connect(lambda : self.imageProcessing.clearOutputGraphicsView())
        self.outputClearButton.clicked.connect(lambda : self.imageProcessing.clearOutputGraphicsView())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Undo and Redo Output Functionality = = = = = = = = = =
        #! ! ! ! ! ! ! ! ! ! NOT IMPLEMENTED IN THE FINAL PROGRAM ! ! ! ! ! ! ! ! ! !
        """
        self.actionUndo_Output.triggered.connect(lambda : self.imageProcessing.outputUndo(self.outputUndoButton, self.actionUndo_Output, self.outputRedoButton, self.actionRedo_Output))
        self.outputUndoButton.clicked.connect(lambda : self.imageProcessing.outputUndo(self.outputUndoButton, self.actionUndo_Output, self.outputRedoButton, self.actionRedo_Output))
        
        self.actionRedo_Output.triggered.connect(lambda : self.imageProcessing.outputRedo(self.outputUndoButton, self.actionUndo_Output, self.outputRedoButton, self.actionRedo_Output))
        self.outputRedoButton.clicked.connect(lambda : self.imageProcessing.outputRedo(self.outputUndoButton, self.actionUndo_Output, self.outputRedoButton, self.actionRedo_Output))
        """
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = RGB to Greyscale Functionality = = = = = = = = = =
        self.actionRGB_to_Grayscale.triggered.connect(lambda : self.imageProcessing.rgbToGrayscale())
        self.rgbToGrayscaleButton.clicked.connect(lambda : self.imageProcessing.rgbToGrayscale())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = RGB to HSV Functionality = = = = = = = = = =
        self.actionRGB_to_HSV.triggered.connect(lambda : self.imageProcessing.rgbToHsv())
        self.rgbToHsvButton.clicked.connect(lambda : self.imageProcessing.rgbToHsv())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Multi-Otsu Thresholding Functionality = = = = = = = = = =
        self.actionMulti_Otsu_Thresholding.triggered.connect(lambda : self.imageProcessing.multiOtsuThresholding())
        self.multiOtsuThresholdingButton.clicked.connect(lambda : self.imageProcessing.multiOtsuThresholding())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Chan-Vese Segmentation Functionality = = = = = = = = = =
        self.actionChan_Vese_Segmentation.triggered.connect(lambda : self.imageProcessing.chanVeseSegmentation())
        self.chanVeseSegmentationButton.clicked.connect(lambda : self.imageProcessing.chanVeseSegmentation())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Morphological Snakes Functionality = = = = = = = = = =
        self.actionMorphologcial_Snakes.triggered.connect(lambda : self.imageProcessing.morphologicalSnakes())
        self.morphologicalSnakesButton.clicked.connect(lambda : self.imageProcessing.morphologicalSnakes())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Roberts Edge Detection Functionality = = = = = = = = = =
        self.actionRoberts.triggered.connect(lambda : self.imageProcessing.EdgeDetectionRoberts())
        self.robertsButton.clicked.connect(lambda : self.imageProcessing.EdgeDetectionRoberts())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Sobel Edge Detection Functionality = = = = = = = = = =
        self.actionSobel.triggered.connect(lambda : self.imageProcessing.EdgeDetectionSobel())
        self.sobelButton.clicked.connect(lambda : self.imageProcessing.EdgeDetectionSobel())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Scharr Edge Detection Functionality = = = = = = = = = =
        self.actionScharr.triggered.connect(lambda : self.imageProcessing.EdgeDetectionScharr())
        self.scharrButton.clicked.connect(lambda : self.imageProcessing.EdgeDetectionScharr())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Prewitt Edge Detection Functionality = = = = = = = = = =
        self.actionPrewitt.triggered.connect(lambda : self.imageProcessing.EdgeDetectionPrewitt())
        self.prewittButton.clicked.connect(lambda : self.imageProcessing.EdgeDetectionPrewitt())
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
        
        #= = = = = = = = = = Exit Event Functionality = = = = = = = = = =
        self.actionExit.triggered.connect(MainWindow.close)
        #= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())